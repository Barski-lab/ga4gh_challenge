#!/usr/bin/env cwl-runner

cwlVersion: v1.0
class: CommandLineTool

requirements:
- class: InlineJavascriptRequirement
- $import: ./metadata/envvar-global.yml

hints:
- class: DockerRequirement
  dockerPull: scidap/ucsc-userapps:v325
  dockerFile: >
    $import: ./dockerfiles/ucsc_utils/Dockerfile


inputs:
  input:
    type: File
    inputBinding:
      position: 2

  genomeFile:
    type: File
    inputBinding:
      position: 3

  bigWig:
    type: string?
    inputBinding:
      position: 4
      valueFrom: |
        ${
            if (self == null){
              return inputs.input.location.split('/').slice(-1)[0].split('.').slice(0,-1).join('.')+".bigwig";
            } else {
              return self;
            }
        }
    default: null

  unc:
    type: boolean?
    doc: "If set, do not use compression."
    inputBinding:
      position: 1
      prefix: "-unc"

  itemsPerSlot:
    type: int?
    doc: |
      -itemsPerSlot=N - Number of data points bundled at lowest level. Default 1024
    inputBinding:
      separate: false
      position: 1
      prefix: "-itemsPerSlot="

  blockSize:
    type: int?
    doc: |
      -blockSize=N - Number of items to bundle in r-tree.  Default 256
    inputBinding:
      separate: false
      position: 1
      prefix: "-blockSize="

outputs:
  bigWigOut:
    type: File
    outputBinding:
      glob: |
        ${
            if (inputs.bigWig == null){
              return inputs.input.location.split('/').slice(-1)[0].split('.').slice(0,-1).join('.')+".bigwig";
            } else {
              return inputs.bigWig;
            }
        }

baseCommand: ["bedGraphToBigWig"]

$namespaces:
  s: http://schema.org/

$schemas:
- http://schema.org/docs/schema_org_rdfa.html

s:mainEntity:
  $import: ./metadata/ucsc-metadata.yaml

s:name: "ucsc-bedgraphtobigwig"
s:downloadUrl: https://raw.githubusercontent.com/SciDAP/workflows/master/tools/ucsc-bedgraphtobigwig.cwl
s:codeRepository: https://github.com/SciDAP/workflows
s:license: http://www.apache.org/licenses/LICENSE-2.0

s:isPartOf:
  class: s:CreativeWork
  s:name: Common Workflow Language
  s:url: http://commonwl.org/

s:creator:
- class: s:Organization
  s:legalName: "Cincinnati Children's Hospital Medical Center"
  s:location:
  - class: s:PostalAddress
    s:addressCountry: "USA"
    s:addressLocality: "Cincinnati"
    s:addressRegion: "OH"
    s:postalCode: "45229"
    s:streetAddress: "3333 Burnet Ave"
    s:telephone: "+1(513)636-4200"
  s:logo: "https://www.cincinnatichildrens.org/-/media/cincinnati%20childrens/global%20shared/childrens-logo-new.png"
  s:department:
  - class: s:Organization
    s:legalName: "Allergy and Immunology"
    s:department:
    - class: s:Organization
      s:legalName: "Barski Research Lab"
      s:member:
      - class: s:Person
        s:name: Andrey Kartashov
        s:email: mailto:Andrey.Kartashov@cchmc.org
        s:sameAs:
        - id: http://orcid.org/0000-0001-9102-5681

doc: |
  Tool is used to convert bedGraph to bigWig file

s:about: >
  usage:
     bedGraphToBigWig in.bedGraph chrom.sizes out.bw
  where in.bedGraph is a four column file in the format:
        <chrom> <start> <end> <value>
  and chrom.sizes is a two-column file/URL: <chromosome name> <size in bases>
  and out.bw is the output indexed big wig file.
  If the assembly <db> is hosted by UCSC, chrom.sizes can be a URL like
    http://hgdownload.cse.ucsc.edu/goldenPath/<db>/bigZips/<db>.chrom.sizes
  or you may use the script fetchChromSizes to download the chrom.sizes file.
  If not hosted by UCSC, a chrom.sizes file can be generated by running
  twoBitInfo on the assembly .2bit file.
  The input bedGraph file must be sorted, use the unix sort command:
    sort -k1,1 -k2,2n unsorted.bedGraph > sorted.bedGraph
  options:
     -blockSize=N - Number of items to bundle in r-tree.  Default 256
     -itemsPerSlot=N - Number of data points bundled at lowest level. Default 1024
     -unc - If set, do not use compression.
